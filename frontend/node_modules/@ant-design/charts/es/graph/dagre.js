import React, { useEffect } from 'react';
import G6 from '@antv/g6';
import ChartLoading from '../util/createLoading';
import { ErrorBoundary } from '../base';
import useGraph from '../hooks/useGraph';
import { defaultNodeSize, defaultLabelCfg, defaultNodeAnchorPoints, defaultStateStyles, defaultEdgeStyle, } from './constants';
import { getGraphSize, processMinimap, getGraphId, renderGraph, bindEvents } from './utils';
var defaultNodeStyle = {
    stroke: '#40a9ff',
};
var defaultLayout = {
    type: 'dagre',
    rankdir: 'TB',
    nodesepFunc: function () { return 0; },
    ranksepFunc: function () { return 0; },
    controlPoints: true,
};
var graphs = {};
var DagreGraph = function (props) {
    var data = props.data, className = props.className, style = props.style, width = props.width, height = props.height, _a = props.nodeType, nodeType = _a === void 0 ? 'modelRect' : _a, _b = props.edgeType, edgeType = _b === void 0 ? 'polyline' : _b, _c = props.behaviors, behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c, _d = props.nodeSize, nodeSize = _d === void 0 ? defaultNodeSize : _d, _e = props.nodeLabelCfg, nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e, _f = props.edgeLabelCfg, edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f, _g = props.nodeAnchorPoints, nodeAnchorPoints = _g === void 0 ? defaultNodeAnchorPoints : _g, _h = props.layout, layout = _h === void 0 ? defaultLayout : _h, minimapCfg = props.minimapCfg, _j = props.nodeStyle, nodeStyle = _j === void 0 ? defaultNodeStyle : _j, _k = props.edgeStyle, edgeStyle = _k === void 0 ? defaultEdgeStyle : _k, _l = props.nodeStateStyles, nodeStateStyles = _l === void 0 ? defaultStateStyles : _l, _m = props.edgeStateStyles, edgeStateStyles = _m === void 0 ? defaultStateStyles : _m, _o = props.autoFit, autoFit = _o === void 0 ? true : _o, graphRef = props.graphRef, onReady = props.onReady, loading = props.loading, loadingTemplate = props.loadingTemplate, errorTemplate = props.errorTemplate;
    var container = React.useRef(null);
    var graph = React.useRef(null);
    var graphId = getGraphId(graph);
    useGraph(graphs[graphId], props, container);
    useEffect(function () {
        var graphSize = getGraphSize(width, height, container);
        var graph = graphs[graphId];
        if (!graph) {
            graph = new G6.Graph({
                container: container.current,
                width: graphSize[0],
                height: graphSize[1],
                modes: {
                    default: behaviors,
                },
                defaultNode: {
                    type: nodeType,
                    size: nodeSize,
                    style: nodeStyle,
                    anchorPoints: nodeAnchorPoints,
                    labelCfg: nodeLabelCfg,
                },
                defaultEdge: {
                    type: edgeType,
                    style: edgeStyle,
                    labelCfg: edgeLabelCfg,
                },
                nodeStateStyles: nodeStateStyles,
                edgeStateStyles: edgeStateStyles,
                layout: layout,
                fitView: true,
            });
            graphs[graphId] = graph;
        }
        if (graphRef) {
            graphRef.current = graph;
        }
        processMinimap(minimapCfg, graph);
        renderGraph(graph, data, autoFit);
        if (onReady) {
            onReady(graph);
        }
        bindEvents(graph, props);
        return function () {
            if (graphs[graphId]) {
                graphs[graphId].destroy();
                delete graphs[graphId];
            }
        };
    }, []);
    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },
        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate }),
        React.createElement("div", { className: className, style: style, ref: container })));
};
export default DagreGraph;
